<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta content="text/html; charset=us-ascii" http-equiv="content-type"/>
        <title>EC-Kubernetes Plugin</title>
		<link rel="stylesheet" href="../../plugins/@PLUGIN_NAME@/pluginhelp.css" type="text/css" media="screen"/>
    </head>
    <body>
        <div class="help">
            <h1>EC-Kubernetes</h1>
            <p>Plugin version @PLUGIN_VERSION@</p>
            <hr style="margin-left: -10px; margin-top: 10px; height: 1px; width: 100%; color: #5981BD;" noshade="noshade"/>
            <h3>Overview</h3>
            <p>EC-Kubernetes plugin integrates with the kubernetes cluster to run Docker containers. Kubernetes schedules your containers into the cluster and manages them automatically based on requirements you define (such as CPU and memory).

            You need to have a Kubernetes cluster available for using this plugin.
            </p>
            <h1>Contents</h1>
            <ul>
                <li><a href="#overview">Overview</a></li>
                <li><a href="#CreateConfiguration">Plugin Configuration</a></li>
                 <li><a href="#procedures">Plugin Procedures</a></li>
                <ul>
                    <li><a href="#ProvisionCluster">Check Cluster</a></li>
                    <li><a href="#DeployService">Deploy Service</a></li>
                    <li><a href="#UndeployService">Undeploy Service</a></li>
                    <li><a href="#CreateOrUpdateKubernetesResource">Invoke Kubernetes API</a></li>
                </ul>
                <li><a href="#usecases">Use Cases</a></li>
                <ul>
                    <li><a href="#CanaryDeployments">Canary Deployments</a></li>
                </ul>
                <li><a href="#releaseNotes">Release Notes</a></li>
            </ul>
            <div id="CreateConfiguration">
                <a name='CreateConfiguration' id="CreateConfiguration"> </a>
                <h2>Plugin Configurations</h2>
                <!-- If the plugin has separate configurations then include
                     this section, otherwise omit this whole section. We don't
                     need to have a configuration section that just says "There
                     is no configuration for this plugin." -->
                <p>
                    Plugin configurations are sets of parameters that apply
                    across some or all of the plugin procedures. They
                    reduce repetition of common values, create
                    predefined parameter sets for end users, and
                    securely store credentials where needed. Each configuration
                    is given a unique name that is entered in designated
                    parameters on procedures that use them.<br /><br />
                </p>
                <!-- For all parameters, the parameter name should be *exactly*
                     the same as it appears in the Parameter Panel, and the first
                     sentence(s) of the description should be the same as the tooltip (if
                     there is one). After that, the parameter description can go into
                     greater detail about the parameter including valid value ranges and
                     examples. -->
                <h3>Creating Plugin Configurations</h3>
                <p>To create plugin configurations in ElectricFlow,
                do these steps:</p>
                
                <li>Go to <b>Administration</b> &gt; <b>Plugins</b> to open the Plugin Manager.</li>
                    <li>Find the EC-Kubernetes row.</li>
                    <li>Click <b>Configure</b> to open the
                    Kubernetes Configurations page.</li>
                    <li>Click <b>Create Configuration</b>.</li>
                    <li>For communicating with the Kubernetes cluster, you need the following details:<br/>
                    <ul type="square">
                        <li>1. Base address of API Endpoint URL </li>
                        <li>2. Bearer token which has authorization to access API.  
                        <p>Use the following steps for creating a bearer token:</p>
                        <ul>
                            <li>Download the Kubeconfig file from your Kubernetes cluster. Or if you have direct access to Kubectl shell of the cluster, that will work too.</li>
                            <li>You will need to install Kubectl (http://kubernetes.io/docs/user-guide/prereqs/) or have access to Kubectl shell</li>
                            <li>Create a service account with following kubectl command:<p>
                                kubectl create serviceaccount api-user
                            </p></li>
                            <li>Assign cluster-admin role to serviceaccount api-user. Specify serviceaccount name as default:api-user, if it is created in default namespace.
                                <p>kubectl create clusterrolebinding root-cluster-admin-binding --clusterrole=cluster-admin --serviceaccount=default:api-user</p>
                            </li>
                            <li>Get details of the service account we just created, from the output determine name of secret in which data is stored:<p>
                            kubectl get serviceaccount api-user -o yaml
                            </p></li>
                            <li>Assuming name of secret from above step is secret-1234, get details of secret:
                                <p>kubectl get secret secret-1234 -o yaml</p></li>
                                <li>The value of token field in above output is the berar token in encoded format. We need to decode it and use it as berar token. On a Unix like system, following command will decode the password<p>
                                echo "encoded_string" | base64 --decode
                                </p></li>
                        </ul>
                        </li>
                    </ul>
                </li>

            </div>            
            <h1 id="procedures">Plugin Procedures</h1>
            <p>
                IMPORTANT: For all parameter descriptions below, required parameters are shown in
                <span class="required">bold italics</span>. Please note that some of names given in ElectricFlow UI will be modified to comply with the naming conventions of Kubernetes. Specifically characters such as "space , _ " will be converted to "-". Such parameters are marked with an asterisk (*).
            </p>
            <div id="ProvisionCluster">
                <h2>Check Cluster</h2>
                <p>The procedure checks if the cluster exists and is reachable with provided details.</p>
                <h3>Check Cluster Parameters</h3>
                <table class="grid">
                    <thead>
                        <tr>
                            <th>Parameter</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="required">Configuration</td>
                            <td>The name of an existing configuration which holds all the connection information for the Kubernetes cluster.</td>
                        </tr>

                    </tbody>
                </table>
            </div>  
            <div id="DeployService">
                <h2>Deploy Service</h2>
                <p>This procedure deploys a service to a Kubernetes cluster</p>
                <h3>Deploy Service Parameters</h3>
                <table class="grid">
                    <thead>
                        <tr>
                            <th>Parameter</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td class="required">Service Name</td>
                            <td>The name of the service in ElectricFlow that encapsulates the service to be deployed on the Kubernetes cluster.</td>
                        </tr>
                        <tr>
                            <td>Service Revision ID</td>
                            <td>Revision Id of the service in ElectricFlow.</td>
                        </tr>
                        <tr>
                            <td class="required">Project Name</td>
                            <td>The name of the project that the service belongs to. In case of an application-level service it also owns the application.</td>
                        </tr>
                        <tr>
                            <td>Application Name</td>
                            <td>The name of the application that the service belongs to. Not applicable for a top-level service.</td>
                        </tr>
                        <tr>
                            <td>Application Revision ID</td>
                            <td>Revision Id of the application version that the service belongs to.</td>
                        </tr>  
                        <tr>
                            <td>Cluster Name</td>
                            <td>The name of the cluster in ElectricFlow that encapsulates the Kubernetes cluster on which the service is to be deployed.</td>
                        </tr>                        
                        <tr>
                            <td>Cluster or environment project name</td>
                            <td>The name of the project that the cluster belongs to if it is a top-level project cluster. Or the name of the project that the environment belongs to if it is an environment-scoped cluster.</td>
                        </tr>
                        <tr>
                            <td>Environment Name</td>
                            <td>The name of the environment that the cluster belongs to. Not applicable for a top-level project cluster.</td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div id="UndeployService">
                <h2>Undeploy Service</h2>
                <p>Undeploys a previously deployed service on the Kubernetes cluster</p>

                <h3>Undeploy Service Parameters</h3>
                <table class="grid">
                    <thead>
                        <tr>
                            <th>Parameter</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <tr>
                            <td>Application Name</td>
                            <td>The name of the application that the service belongs to. Not applicable for a top-level service.</td>
                        </tr>

                        <tr>
                            <td>Application Revision ID</td>
                            <td>Revision Id of the application version that the service belongs to.</td>
                        </tr>

                        <tr>
                            <td>Cluster Name</td>
                            <td>The name of the cluster in the environment on which the service was previously deployed. If not specified, the application tier mapping will be used to find the cluster name.</td>
                        </tr>

                        <tr>
                            <td class="required">Environment Name</td>
                            <td>The name of the environment that the cluster belongs to.</td>
                        </tr>

                        <tr>
                            <td>Environment Project Name</td>
                            <td>The name of the project that the environment belongs to. If not specified, the environment is assumed to be in the same project as the service.</td>
                        </tr>

                        <tr>
                            <td class="required">Service Name*</td>
                            <td>The name of the service in ElectricFlow that encapsulates the service that was previously deployed on the Kubernetes cluster.</td>
                        </tr>
                        <tr>
                            <td>Service Revision ID</td>
                            <td>Revision Id of the service in ElectricFlow.</td>
                        </tr>
                        <tr>
                            <td class="required">Project Name</td>
                            <td>The name of the project that the service belongs to. In case of an application-level service it also owns the application.</td>
                        </tr>

                    </tbody>
                </table>

            </div>
            <div id="CreateOrUpdateKubernetesResource">
                <h2>Invoke Kubernetes API</h2>
                <p>Invokes Kubernetes REST API based on specified input parameters. Can also be used to create or modify a resource in Kubernetes cluster based on JSON/YAML as input.</p>

                <h3>Invoke Kubernetes API Parameters</h3>
                <table class="grid">
                    <thead>
                        <tr>
                            <th>Parameter</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>

                        <tr>
                            <td class="required">Configuration</td>
                            <td>The name of an existing configuration which holds all the connection information for the Kubernetes cluster.</td>
                        </tr>

                        <tr class="required">
                            <td>Kubernetes API URI</td>
                            <td>The URI for the Kubernetes API to invoke. E.g., '/api/v1/namespaces'.</td>
                        </tr>

                        <tr class="required">
                            <td>HTTP method for the Kubernetes API</td>
                            <td>HTTP method for the Kubernetes REST API to be invoked.</td>
                        </tr>

                        <tr>
                            <td>Request Payload Format</td>
                            <td>Format of the request payload. Possible values are 'json' or 'yaml'. Not applicable for HTTP methods 'get' and 'delete'.</td>
                        </tr>

                        <tr>
                            <td>Request Payload</td>
                            <td>The request body/payload in JSON or YAML format. Not applicable for HTTP methods 'get' and 'delete'.</td>
                        </tr>

                        <tr>
                            <td>Output Property Location</td>
                            <td>Location of the output property where the API response will be saved. If not specified, then if the procedure is invoked in a pipeline, the location will default to '/myStageRuntime/k8sAPIResult' else it will default to '/myJob/k8sAPIResult'.</td>
                        </tr>

                    </tbody>
                </table>

            </div>

            <h1 id="usecases">Use Cases</h1>
            <div id="CanaryDeployments">
                <h2>Canary Deployments</h2>
                <p>Canary deployment is a way of sending out a new release into production that plays the role of a "canary" to get an idea of how a new release will perform before rolling it out to all the users.</p>
                <p>A canary deployment consists of rolling out a new release or a new functionality to a subset of users or servers. This can be achieved in a Kubernetes cluster by deploying a canary of a new release side by side with the previous release so that the new release can receive live production traffic before fully rolling it out. (Reference: <a href="https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/#canary-deployments" target="_blank">Canary Deployments</a>).</p>
                <p>When ElectricFlow deploys a service to Kubernetes, the EC-Kubernetes plugin manages both the service in Kubernetes (the abstraction for a logical set of pods and a policy by which to access them) as well as the deployment controller (a deployment controller provides declarative updates for pods and replicate sets). The service created or updated by the plugin is configured to point to the pods created based on the pod specifications declared in the deployment controller.
                    In order to perform a canary deployment, the following two service mapping attributes can be set:<br/>
                    <ol>
                        <li><b>Perform Canary Deployment: </b>If true, then a canary deployment will be performed. Any previous deployment will remain unchanged in the namespace allowing this canary deployment to receive live traffic side by side with the previous deployment.</li>
                        <li><b>Number of Canary Replicas: </b>The number of replicas to create if performing a canary deployment. Defaults to 1 replica for the canary deployment.</li>
                    </ol>
                    <br/>Having these attributes in the service mapping allows you to use the same service deployment and undeployment processes that you would use for performing a more typical service deployment or undeployment. The following steps describe how this can be achieved.
                    <ol>
                        <li>Set <i>$[/myJob/canaryDeployment]</i> as the property reference value for <b>Perform Canary Deployment</b> and <i>$[/myJob/canaryReplicas]</i> for <b>Number of Canary Replicas</b>.<br/>
                            <img src="../../plugins/@PLUGIN_KEY@/images/CanaryDeploymentServiceAttributes.png" alt="screenshot" /><br/><br/></li>
                        <li>Now add <i>canaryDeployment</i> and <i>canaryReplicas</i> as parameters to your service or application deploy and the undeploy processes.<br/>The values specified for these parameters will automatically be resolved when the service mapping is used by EC-Kubernetes while performing the deployment. If <i>canaryDeployment</i> is set to true, then a canary deployment will be performed.<br/>
                            <img src="../../plugins/@PLUGIN_KEY@/images/CanaryDeploymentDeployProcessParameters.png" alt="screenshot" /><br/>
                            Similarly, during undeploy process through <i>Undeploy Service</i> procedure, if <i>canaryDeployment</i> is set to true, then the canary deployment will be removed without impacting the previous deployment or the service.
                            <img src="../../plugins/@PLUGIN_KEY@/images/CanaryDeploymentUndeployProcessParameters.png" alt="screenshot" /><br/><br/>
                        </li>
                        <li>Finally tie the deploy and undeploy processes into an end-to-end service release pipeline including managing the canary deployments and rolling out new releases.<br/>
                            <img src="../../plugins/@PLUGIN_KEY@/images/CanaryDeploymentPipeline.png" alt="screenshot" /><br/>
                            <p>(1) Define a 'deploy canary' task to perform a canary deployment using the specified version on the same environment where the service is targeted.<br/>
                            (2) After the canary deployment is pushed out to the environment, side by side with the previous release, use a manual task to approve the roll out of the new version if it is confirmed that the 'canary deployment is safe' and good to be rolled out.<br/>
                            (3) Once the canary deployment is confirmed to be safe and the pipeline is allowed to continue, define a 'deploy new service version' task to deploy the new version of the service.<br/>
                            (4) Finally, regardless of the canary deployment's result, define an 'undeploy the canary' task to undeploy the canary deployment.<br/>
                            </p>
                        </li>
                    </ol>

                </p>
            </div>

            <h1 id="releaseNotes">Release Notes</h1>
            <h3>EC-Kubernetes 1.0.3</h3>
            <ul>
                <li>Made secrets compliant with DNS-1123 standards.</li>
                <li>Removed unused parameter <i>additionalAttributes</i> from container mapping configuration.</li>
                <li>When a microservice is deployed through ElectricFlow on a Kubernetes cluster, and 'NodePort' is specified as the service type in the service mapping, then the provisioned node port is registered as a pipeline stage runtime property <i>/myStageRuntime/&lt;applicationName&gt;/&lt;serviceName&gt;/&lt;targetPort&gt;/nodePort</i>.</li>
                <li>When deploying a microservice through ElectricFlow on a Kubernetes cluster, the service name to use in Kubernetes can now be overridden through the service mapping.</li>
                <li>Deprecated procedure <i>Create Resource</i>. The newly added procedure <i>Invoke Kubernetes API</i> should be used instead for creating or updating a Kubernetes resource.</li>
                <li>Added support for <b>canary deployments</b>. See section <a href="#CanaryDeployments">Canary Deployments</a> for details.</li>
            </ul>
            <h3>EC-Kubernetes 1.0.2</h3>
            <ul>
                <li>Added support for Kubernetes API version 1.7</li>
                <li>Added 'kubernetesVersion' parameter in the plugin configuration to allow the user to identify the Kubernetes version running on the cluster master. The parameter will default to '1.6' if no value is specified.</li>
                <li>Added procedure <i>Undeploy Service</i> to undeploy a previously deployed service.</li>
                <li>Handled race condition in parallel creation of a namespace by multiple steps.</li>
            </ul>
            <h3>EC-Kubernetes 1.0.1</h3>
            <ul>
                <li>Added helper functions in base client utility to support services Discovery in EC-GoogleContainerEngine</li>
            </ul>
            <h3>EC-Kubernetes 1.0.0</h3>
            <ul>
                <li>First release.</li>
            </ul>
        </div>
    </body>
</html> 
