
plugins {
    id 'groovy'
    id 'java'
    id 'idea'
    id "io.qameta.allure" version "2.5"
}


ext {
    allureVersion = '2.7.0'
    testNgVersion = '6.14.3'
    restAssuredVersion = '3.1.0'

}


allure {
    version = "$allureVersion"
    autoconfigure = true
    aspectjweaver = true
    aspectjVersion = '1.8.10'
    resultsDir = file("${rootDir}/build/allure-results")
    reportDir = file("${rootDir}/build/reports/allure-report")
    useTestNG {
        version = "${allureVersion}"
    }
    downloadLink = "https://github.com/allure-framework/allure2/releases/download/$allureVersion/allure-${allureVersion}.zip"
}


group 'com.electriccloud'
version '1.0-SNAPSHOT'
description = "EC-Kubernetes Specs"


repositories {
    jcenter()
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        url  "https://dl.bintray.com/ecpluginsdev/maven"
    }
    /*maven {
        // Local snapshots
        url "http://10.200.1.182:8081/artifactory/libs-snapshot-local"
    }*/
}


dependencies {
    implementation(
            'org.codehaus.groovy:groovy-all:2.4.5:indy',
            "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1",
            "org.testng:testng:$testNgVersion",
            "io.qameta.allure:allure-testng:$allureVersion",
            "org.jfrog.artifactory.client:artifactory-java-client-services:2.6.2",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            'org.spockframework:spock-core:1.1-groovy-2.4-SNAPSHOT',
            'com.electriccloud:ec-specs-plugins-core:1.5.0',
            'com.jayway.restassured:rest-assured:2.4.0',
            "org.awaitility:awaitility:3.1.0",
            "org.awaitility:awaitility-groovy:3.1.0",
            "org.hamcrest:hamcrest-all:1.3",
            'com.google.guava:guava:27.0-jre'
    )
    testImplementation( 'com.athaydes:spock-reports:1.6.0' ) {
        transitive = false // this avoids affecting your version of Groovy/Spock
    }
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    // JSON
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    compile group: 'org.json', name: 'json', version: '20180130'
    // Kubernetes API
    compile 'io.kubernetes:client-java:1.0.0'

}

task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
}


clean.doFirst {
    delete "src/main/resources/logs"
    delete "${rootDir}/out"
    delete "${rootDir}/build"
    delete "${rootDir}/scr/commander/resources/config/history"
    delete "${rootDir}/allure-results"
    delete "${rootDir}/allure-report"
    delete "${rootDir}/.ecsession"
}


import io.qameta.allure.gradle.task.AllureReport
task allureAggregatedReport(type: AllureReport) {
    allure.resultsDir
    // Task: ./gradlew allureServe  - to watch the rgenerated report
}



task allureConfiguration(type: Copy){
    def configDir = "${rootDir}/specs/src/commander/resources/config/allure"
    from "${configDir}/categories.json", "${configDir}/environment.properties", "${configDir}/executor.json"
    into "${rootDir}/build/allure-results"
}



task systemTest(type: Test){

    systemProperty "file.encoding", "utf-8"
    systemProperty "log4j.configuration", "file:///${rootDir.absolutePath}/src/main/resources/log4j.properties"
    systemProperty "allure.link.issue.pattern", "http://jira.electric-cloud.com/browse/{}"
    systemProperty "allure.link.tms.pattern", "https://ecflow.testrail.net/index.php?/cases/view/{}"
    ignoreFailures = true
    useTestNG() {
        suites "${suiteDir}/regressionTests.xml"
    }
    testLogging.showStandardStreams = true

    def destination = findProperty('reportDestination') ?: "${rootDir}/build/reports/allure-report"
    if (destination) {
        reports {
            html.destination = "$destination"
        }
    }

}
systemTest.finalizedBy allureAggregatedReport



test {
    systemProperty 'com.athaydes.spockframework.report.showCodeBlocks', true

    def server = findProperty('server') ?: findProperty('COMMANDER_SERVER') ?: findProperty('commanderServer') ?: 'localhost'
    systemProperties['COMMANDER_SERVER'] = server
    systemProperties["COMMANDER_SECURE"] = '1'

    testLogging {
        showStandardStreams = true
    }
    outputs.upToDateWhen { false }
    systemProperties['EC_SPECS_CLI'] = true

    def destination = findProperty('reportDestination') ?: "spec-report"
    if (destination) {
        systemProperty 'com.athaydes.spockframework.report.outputDir', destination
    }
}.finalizedBy systemTest




